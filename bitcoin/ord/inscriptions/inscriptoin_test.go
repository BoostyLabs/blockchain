// Copyright (C) 2024 Creditor Corp. Group.
// See LICENSE for copying information.

package inscriptions_test

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/btcsuite/btcd/chaincfg"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/stretchr/testify/require"

	"github.com/BoostyLabs/blockchain/bitcoin/ord/inscriptions"
	"github.com/BoostyLabs/blockchain/bitcoin/ord/runes"
)

func TestInscription(t *testing.T) {
	rune_, err := runes.NewRuneFromString("TESTRUNE")
	require.NoError(t, err)

	t.Run("PrepareBody", func(t *testing.T) {
		tests := []struct {
			bodySize        int
			expectedBufSize int
			lastArrSize     int
		}{
			{0, 0, 0},
			{1, 1, 1},
			{519, 1, 519},
			{520, 1, 520},
			{521, 2, 1},
			{1039, 2, 519},
			{1040, 2, 520},
			{1041, 3, 1},
		}
		for _, test := range tests {
			inscription := new(inscriptions.Inscription)
			inscription.Body = make([]byte, test.bodySize)
			buffer := inscription.PrepareBody()
			require.Len(t, buffer, test.expectedBufSize)
			if test.expectedBufSize > 0 {
				for i := 0; i < test.expectedBufSize-1; i++ {
					require.Len(t, buffer[i], 520)
				}
				require.Len(t, buffer[test.expectedBufSize-1], test.lastArrSize)
			}
		}
	})

	t.Run("IsPossibleInscriptionWitnessData", func(t *testing.T) {
		tests := []struct {
			value    string
			expected bool
		}{
			{"20f8f122cdc9815622f3a2d1ff8aba4b18e70d9d1a65e0cab8a03b0f049fd150c2ac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d380102000d313731333633333332343536390a05296808e28d25c801010014303532393638303865323864323563383031303168", true},
			{"0063036f7264010118746578742f706c61696e3b636861727365743d7574662d380102000d313731333633333332343536390a05296808e28d25c801010014303532393638303865323864323563383031303168", true},
			{"20f58a2a986582ffd680e572f2413feea6ce05dad8bed004fe5a262198312867faac0063036f72645d03be4039000974657374206461746168", true},
			{"0063036f72645d03be4039000974657374206461746168", true},
			{"c0f58a2a986582ffd680e572f2413feea6ce05dad8bed004fe5a262198312867fa", false},
			{"c45a6b10e88d4de3dee5ca89489c0056e76a92e605b018f2b47a48de2f78ec2e31f70a93c248271d776943eb7f6674393ee034541f66a411b495aa63ce0eac9401", false},
		}
		for _, test := range tests {
			data, err := hex.DecodeString(test.value)
			require.NoError(t, err)
			require.EqualValues(t, test.expected, inscriptions.IsPossibleInscriptionWitnessData(data))
		}
	})

	t.Run("IntoScript", func(t *testing.T) {
		tests := []struct {
			inscription *inscriptions.Inscription
			expected    string
		}{
			{
				&inscriptions.Inscription{
					ContentType:  "text/plain",
					Metaprotocol: []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
					Body:         []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
				},
				"0063036f726401010a746578742f706c61696e010736406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d370036406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d3768",
			},
			{
				&inscriptions.Inscription{
					ContentType: "text/plain;charset=utf-8",
					Body:        []byte("Hello, world!"),
				},
				"0063036f7264010118746578742f706c61696e3b636861727365743d7574662d38000d48656c6c6f2c20776f726c642168",
			},
			{
				&inscriptions.Inscription{
					ContentType:     "application/json",
					ContentEncoding: "hex",
					Body:            []byte(hex.EncodeToString([]byte(`{"field":"value"}`))),
				},
				"0063036f72640101106170706c69636174696f6e2f6a736f6e01090368657800223762323236363639363536633634323233613232373636313663373536353232376468",
			},
			{
				&inscriptions.Inscription{
					ContentType: "image/png",
					Rune:        rune_,
					Body:        make([]byte, 2048),
				},
				"0063036f7264010109696d6167652f706e67010d051478bfd025004dddde
			},
		}
		for _, test := range tests {
			script, err := test.inscription.IntoScript()
			require.NoError(t, err)
			require.EqualValues(t, test.expected, hex.EncodeToString(script))
		}
	})

	t.Run("IntoScriptForWitness", func(t *testing.T) {
		tests := []struct {
			pubKeyHex   string
			inscription *inscriptions.Inscription
			expected    string
		}{
			{
				"a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80",
				&inscriptions.Inscription{
					ContentType:  "text/plain",
					Metaprotocol: []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
					Body:         []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
				},
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f726401010a746578742f706c61696e010736406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d370036406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d3768",
			},
			{
				"a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80",
				&inscriptions.Inscription{
					ContentType: "text/plain;charset=utf-8",
					Body:        []byte("Hello, world!"),
				},
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d38000d48656c6c6f2c20776f726c642168",
			},
			{
				"a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80",
				&inscriptions.Inscription{
					ContentType:     "application/json",
					ContentEncoding: "hex",
					Body:            []byte(hex.EncodeToString([]byte(`{"field":"value"}`))),
				},
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f72640101106170706c69636174696f6e2f6a736f6e01090368657800223762323236363639363536633634323233613232373636313663373536353232376468",
			},
			{
				"a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80",
				&inscriptions.Inscription{
					ContentType: "image/png",
					Rune:        rune_,
					Body:        make([]byte, 2048),
				},
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f7264010109696d6167652f706e67010d051478bfd025004dddde
			},
		}
		for _, test := range tests {
			pubKey, err := hex.DecodeString(test.pubKeyHex)
			require.NoError(t, err)

			script, err := test.inscription.IntoScriptForWitness(pubKey)
			require.NoError(t, err)
			require.EqualValues(t, test.expected, hex.EncodeToString(script))
		}
	})

	t.Run("ParseInscriptionFromWitnessData", func(t *testing.T) {
		rune2, err := runes.NewRuneFromString("DOGGOTOTHEMOON")
		require.NoError(t, err)

		tests := []struct {
			dataHex  string
			expected *inscriptions.Inscription
			err      error
		}{
			{
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f726401010a746578742f706c61696e010736406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d370036406d6f746f3a737761703a3a636272632d32303a737761703f61623d50495a5a412d4d4f544f26613d3130303026623d322e32652d3768",
				&inscriptions.Inscription{
					ContentType:  "text/plain",
					Metaprotocol: []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
					Body:         []byte("@moto:swap::cbrc-20:swap?ab=PIZZA-MOTO&a=1000&b=2.2e-7"),
				},
				nil,
			},
			{
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d38000d48656c6c6f2c20776f726c642168",
				&inscriptions.Inscription{
					ContentType: "text/plain;charset=utf-8",
					Body:        []byte("Hello, world!"),
				},
				nil,
			},
			{
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f72640101106170706c69636174696f6e2f6a736f6e01090368657800223762323236363639363536633634323233613232373636313663373536353232376468",
				&inscriptions.Inscription{
					ContentType:     "application/json",
					ContentEncoding: "hex",
					Body:            []byte(hex.EncodeToString([]byte(`{"field":"value"}`))),
				},
				nil,
			},
			{
				"20a9a7255fda3a07a2a3a651bae594a0ede366bb8c87bc13de4e76c2c189724a80ac0063036f7264010109696d6167652f706e67010d051478bfd025004dddde
				&inscriptions.Inscription{
					ContentType: "image/png",
					Rune:        rune_,
					Body:        make([]byte, 2048),
				},
				nil,
			},
			{
				"20658204e3f80250f45924140b103ea13c6ae9e3186f49af92027453a6fa7b1113ac0063036f7264010b205f83846783d4a3a733b68c4f5e77fd4d421c7a18417856c76695e1234efb8f61010200010d0887d0100e5cdff79d68",
				&inscriptions.Inscription{
					Delegate: &inscriptions.ID{TxID: mustHash(t, "618ffb4e23e19566c7567841187a1c424dfd775e4f8cb633a7a3d4836784835f"), Index: 0},
					Pointer:  big.NewInt(0),
					Rune:     rune2,
				},
				nil,
			},
			{
				"63036f72640101106170706c69636174696f6e2f6a736f6e01090368657800223762323236363639363536633634323233613232373636313663373536353232376468",
				nil,
				inscriptions.ErrMalformedInscription,
			},
			{
				"6863036f72640101106170706c69636174696f6e2f6a736f6e01090368657800223762323236363639363536633634323233613232373636313663373536353232376468",
				nil,
				inscriptions.ErrMalformedInscription,
			},
			{
				"0063036f72640101106170706c69636174696f6e2f6a736f6e0101010168",
				nil,
				inscriptions.ErrRepeatedFieldData,
			},
		}
		for _, test := range tests {
			data, err := hex.DecodeString(test.dataHex)
			require.NoError(t, err)

			inscription, err := inscriptions.ParseInscriptionFromWitnessData(data)
			require.ErrorIs(t, err, test.err)
			require.EqualValues(t, test.expected, inscription)
		}
	})

	t.Run("IntoAddress", func(t *testing.T) {
		rune1, err := runes.NewRuneFromString("HELLO")
		require.NoError(t, err)

		chainParams := &chaincfg.TestNet3Params
		tests := []struct {
			publicKey   string
			inscription *inscriptions.Inscription
			expected    string
		}{
			{
				"02f58a2a986582ffd680e572f2413feea6ce05dad8bed004fe5a262198312867fa",
				&inscriptions.Inscription{
					Rune: rune1,
					Body: []byte("test data"),
				},
				"tb1p5wgkf2875q0ldqrspk367ulxwt485clkrc5j93cvmhsnppcz3x2srcptmt",
			},
			{
				"04f58a2a986582ffd680e572f2413feea6ce05dad8bed004fe5a262198312867fa2a8bc487864eeaef71e16cf1c0d15035faeba1976a7879d7de91e2b7acde0846",
				&inscriptions.Inscription{
					Rune: rune1,
					Body: []byte("test data"),
				},
				"tb1p5wgkf2875q0ldqrspk367ulxwt485clkrc5j93cvmhsnppcz3x2srcptmt",
			},
			{
				"04f58a2a986582ffd680e572f2413feea6ce05dad8bed004fe5a262198312867fa2a8bc487864eeaef71e16cf1c0d15035faeba1976a7879d7de91e2b7acde0846",
				&inscriptions.Inscription{
					ContentType: "image/png",
					Rune:        rune_,
					Body:        make([]byte, 2048),
				},
				"tb1p24rs4z6ruqhgaq2243uq84jgup736sm4zznlcl3xfvakzdh7yyeqme4d53",
			},
		}
		for _, test := range tests {
			address, err := test.inscription.IntoAddress(test.publicKey, chainParams)
			require.NoError(t, err)
			require.EqualValues(t, test.expected, address)
		}
	})

	t.Run("VBytesSize", func(t *testing.T) {
		tests := []struct {
			inscription *inscriptions.Inscription
			expected    int
		}{
			{
				&inscriptions.Inscription{
					Rune: rune_,
					Body: []byte("test data"),
				},
				15,
			},
			{
				&inscriptions.Inscription{
					ContentType: "image/png",
					Rune:        rune_,
					Body:        make([]byte, 2048),
				},
				531,
			},
		}
		for _, test := range tests {
			size, err := test.inscription.VBytesSize()
			require.NoError(t, err)
			require.EqualValues(t, test.expected, size)
		}
	})
}

func mustHash(t *testing.T, hash string) *chainhash.Hash {
	h, err := chainhash.NewHashFromStr(hash)
	require.NoError(t, err)

	return h
}
